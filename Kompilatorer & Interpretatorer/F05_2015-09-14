X:Yacc:X, X:Bison:X, bison, X:Lex:X X:Flex:x flex

								  - Anrop yylex()
grammatik.y >[bison -d]< parser.c - yyparse()   java.tab.c
java.y			|		 headers 				java.tab.h
				v
		felmeddelanden &
			varning	

::Indata till Bison::

Deklarationer
%%
Grammatiken		<- { printf("*"); }
%%
C-funktioner


%{
	#include <stdio.h>
	#include "global.h"
	extern int foobar;
%}

%token IF ELSE PLUSPLUS KLART

%% 									

program : satser KLART ; 							// program -> satser KLART

satser : sats 										// satser -> sats | sats ';' satser 
	   | sats ';' satser
	   ;

uttryck : term										//uttryck -> term | uttryck '+' term
		| uttryck '+' term { printf("+"); }
		;

%%


Ex: 2 + 3 * 4 + 5 => 19

::En komplett kalkylator::

%{
	#include <stdio.h>
	#include <ctype.h>
%}

%token DIGIT

%%

rad : uttryck '\n' { printf("%d\n", $1); } ;

uttryck : uttryck '+' term { $$ = $1 + $3; }
		| term { $$ = $1; } 						//kan skippas p.g.a. default
		;

term : term '*' faktor { $$ = $1 * $3; }
	 | faktor
	 ;

faktor : DIGIT
	   | '(' uttryck ')' { $$ = $2; }
	   ;

%%

int yylex()
{
	int c;
	c = getchar();
	if (isdigit(c))
	{
		yylval = c - '0';
		return DIGIT;
	}
	return c;
}

void yyerror(char *s) { printf("FEL: %s\n", s); }

int main(void)
{
	yyparse();
	return 0;
}


::Enklare sätt att ange operator prioritet::

%left '+' '-'					// | 
%left '*' '/' '%'        		// v högre prioritet, %left ger vänsterassociation
%right X:'-':X UMINUS 		//problem med att se skillnad på unärt och binärt minus
%nonassoc '<'

%%

uttryck : TAL
		| uttryck '+' uttryck
		| uttryck '-' uttryck
		| uttryck '*' uttryck
		...
		| '-' uttryck %prec UMINUS
		;

::if-else tvetydighet::
sats -> IF '(' uttryck ')' sats | IF '(' uttryck ')' ELSE sats

íf (a < 2)
	if (a > 7)
		printf("y");
else //tvetydighet, vart hör denna
	printf("z");

lösning, prioritet:

%nonassoc IFX
%nonassoc ELSE

sats -> IF '(' uttryck ')' sats %prec IFX | IF '(' uttryck ')' ELSE sats


::Semantiska aktioner::
sats : IF '(' uttryck ')' { ... } sats
	 | IF { ... } '(' uttryck ')' sats ELSE sats
 	 ;