Maskinoberoende kodoptimering
Mellankod
Flödesgrafer

x = 17;
y = 2;
if (x < 5 + 2 * 3) 
	printf("Hej!\n");

5+2*3 kan räknas ut i förväg till 11, mer avancerat, x=17, och blir inte ändrat tidigare så 17 < 15 kan skrivas, alltid falskt, if satsen kan optimeras bort, finns inget mer i programmet är variabel deklarationerna onödiga och hela programmet kan optimeras bort

Tre sorters optimering:
1. "Låg-nivå-optimering" <- Kompilatorn
2. Algoritmer och datastrukturer <- Människa
3. Maskinberoende optimering

printf("Hej!\n"
	   "Hopp!\n");
"hej" "hopp" dessa slås ihop automatiskt i C

Ex: x + y * z

	+ - temp2
   / \
  x   * - temp1
  	 / \
  	y	z

  	|
  	v

temp1 = y * z
temp2 = x + temp1

Tre-adress kod

Ex2: a = b * -c + b * -c;

			= 
		   / \
		  a     + t5
		  	 /	  \
		  	* t2	* t4
		   / \ 	   / \
		  b  - t1  b  - t3
 		  	 |   	  |
		  	 c        c

t1 = -c
t2 = b * t1
t3 = -c
t4 = b * t3
t5 = t2 + t4
a = t5       		//tre-adress instruktion med 2 adresser

goto L 				//en adress
if (x < y) goto L 	//tre adresser

array med structar
	op     res v- arg -v
0 [ AM   | t1 | c  |    ]
1 [ MUL  | t2 | b  | t1 ]
2 [      |    |    |    ]
  ...
  [ GOTO | L  |    |    ]

-------------------------
param 
call
return

         v--  t4 --v
Ex: f(x, x+y+z*(7-y)):
	param x
	param t4
	call f, 2

x = y + a[i]:

t1 = a[i]
x = y + t1

a[i] = x + y:

t1 = x + y
a[i] = t1

x = *y
*x = y
x = &y

Flödesgrafer:

tot = 0;
for(i = 0; i < 10; ++i)
	tot = tot + i;
print(tot);

		tot = 0;				#1
		i = 0;					#1	|
LF: 	if i >= 10 goto LA		#2	< <  | -
		tot = tot + i 			#3	  |  < |
		i = i + 1				#3    |    | 
		goto LF					#3    |    |
LA: 	param tot				#4         <
		call print, 1			#4

"Basic blocks" snuttar av tre-adress-kod som kommer köras i ordning utan hopp in eller ut

Exempel på optimeringar inom ett basic block:
1. Eliminering av gemensamma deluttryck
[a = b + c]    [a = b + c]
|b = a - d| => |b = a - d|
|c = b + c|	   |c = b + c|
[d = a - d]    [d = b    ]

2. Algebraiska transformationer
[a = a + 0]    [         ]
|b = b * 1| => |         |
[c = d**2 ]    [c = d * d]

3. Eliminering av död kod
[x = y + z] => [         ]
om x är död data (aldrig kommer användas)

Från exempel:
x = a[i]; a[i] = a[j]; a[j] = x;

[t6 = 4 * i ]	 [t6 = 4 * i]    [          ]    [          ]    [          ]    [          ]
|x = a[t6]  |	 |x = a[t6] |    |x = a[t2] |    |x = t3    |    |x = t3    |    |          |
|t7 = 4 * i |    |          |    |          |    |          |    |          |    |          |
|t8 = 4 * j |    |t8 = 4 * j|    |          |    |          |    |          |    |          |
|t9 = a[t8] | => |t9 = a[t8]| => |t9 = a[t4]| => |t9 = t5   | => |          | => |          |
|a[t7] = t9 |    |a[t6] = t9|    |a[t2] = t9|    |a[t2] = t9|    |a[t2] = t5|    |a[t2] = t5|
|t10 = 4 * j|    |          |	 |		    |    |          |    |          |    |          |
|a[t10] = x |    |a[t8] = x |    |a[t4] = x |    |a[t4] = x |    |a[t4] = x |    |a[t4] = t3|
[goto B2    ]    [goto B2   ]    [goto B2   ]    [goto B2   ]    [goto B2   ]    [goto B2   ] 

				 Lokala			 Globala 
				 gemensamma 	 gemensamma
				 deluttryck	     deluttryck
